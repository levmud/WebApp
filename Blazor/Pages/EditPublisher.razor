@page "/Publisher/{PublisherId}/edit"
@using Blazor.Data.Models
@using Blazor.Data.Services
@using Blazor.Data.DTOs
@inject NavigationManager _navigationManager

<div class="container-fluid">
    <div class="break-min"></div>
    <h3> Изменение издательство </h3>
    <div class="break-min"></div>
</div>

<div class="row justify-content-center">
    <div class="col-md-4 "> </div>
    <div class="box col-md-4 ">

        <label class="input-label" for="label">Название</label>
        <div class="input-wrapper">
            <input class="input-title" id="label"  @bind="name">
        </div>
        <label class="input-label" for="label">Телефон</label>
        <div class="input-wrapper">
            <input class="input-title" id="label"  @bind="phone">
        </div>
        <label class="input-label" for="label">Почта</label>
        <div class="input-wrapper">
            <input class="input-title" id="label"  @bind="mail">
        </div>
        <div class="add_author" @onclick="editPublisher">Создать</div>
    </div>
    <div class="col-md-4 "> </div>
</div>
@code {
    [Inject]
    IPublisherProvider publisherProvider { get; set; }


    private string name;
    private string phone;
    private string mail;

    [Parameter]
    public string PublisherId { get; set; }

    private Publisher? publisher;

    protected override async Task OnInitializedAsync()
    {
        publisher = await publisherProvider.GetOne(Int32.Parse(PublisherId));
        name = publisher.Name;
        phone = publisher.Phone;
        mail = publisher.Mail;

    }


    private async void editPublisher()
    {

        PublisherDTO newPublisher = new PublisherDTO();
        newPublisher.Name = name;
        newPublisher.Phone = phone;
        newPublisher.Mail = mail;

        await publisherProvider.Edit(Int32.Parse(PublisherId), newPublisher);
        _navigationManager.NavigateTo($"/Publisher/{PublisherId}");
    }
}

