@page "/Author/{AuthorId}"
@using Blazor.Data.Services


<h3>Информация об авторе</h3>
@if (CurrentAuthor != null)
{
	<div class="authorBlock">
		<div class="field">
			<label class="label">Идентификатор</label> <input class="form-control valueField"
	type="text" value="@CurrentAuthor.Id" aria-label="Disabled input example" disabled readonly>
		</div>
		<div class="field">
	<label class="label">ФИО</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Fullname" aria-label="Disabled input example" disabled readonly>
		</div>
		<div class="field">
			<label class="label">Направление</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Direction" aria-label="Disabled input example" disabled readonly>
		</div>
		<div class="field">
			<label class="label">Страна</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Country" aria-label="Disabled input example" disabled readonly>
		</div>
	</div>
	
	<h3>Книги</h3>
	<table class="table">
		<thead>
		<th >Название</th>
		<th >Жанр</th>
		<th >Стоимость</th>
		<th >Описание</th>
		<th >Издание</th>
		</thead>
		<tbody>
		@foreach (var b in CurrentAuthor.Books)
		{
			<tr >
				<td>@b.Title</td>
				<td>@b.Genre</td>
				<td>@b.Cost</td>
				<td>@b.Description</td>
				<td>@b.Publisher.Name</td>
			</tr>
		}
		</tbody>
	</table>
}
@code {
	[Parameter]
	public string AuthorId { get; set; }
	public List<Data.Models.Author> Authors { get; set; }
	public Data.Models.Author? CurrentAuthor { get; set; }
	[Inject]
	private IAuthorProvider authorsProvider { get; set; }
	protected async override Task OnInitializedAsync()
	{
		CurrentAuthor = await authorsProvider.GetOne(Int32.Parse(AuthorId));
		Authors = await authorsProvider.GetAll();
		Console.WriteLine(CurrentAuthor);
		base.OnInitialized();
	}
}
