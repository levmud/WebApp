@page "/Author/{AuthorId}"
@using Blazor.Data.Services
@using Blazor.Data.Models
@inject NavigationManager _navigationManager

<div class="container-fluid">
    <div class="break-min"></div>
    <h3> Информация об авторе </h3>
    <div class="break-min"></div>
</div>

@if (CurrentAuthor != null)
{
	<div class="authorBlock">
@*		<div class="field">
			<label class="label">Идентификатор</label> <input class="form-control valueField"
	type="text" value="@CurrentAuthor.Id" aria-label="Disabled input example" disabled readonly>
		</div>*@
		<div class="field">
	<label class="label">ФИО</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Fullname" aria-label="Disabled input example" disabled readonly>
		</div>
		<div class="field">
			<label class="label">Направление</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Direction" aria-label="Disabled input example" disabled readonly>
		</div>
		<div class="field">
			<label class="label">Страна</label> <input class="form-control valueField" type="text"
	value="@CurrentAuthor.Country" aria-label="Disabled input example" disabled readonly>
		</div>
	</div>
	
	<h3>Книги</h3>
	<table class="table">
		<thead>
		<th >Название</th>
		<th >Жанр</th>
		</thead>
		<tbody>
		@foreach (var b in CurrentAuthor.Books)
		{
			<tr @onclick="()=>toItem(b)">
				<td>@b.Title</td>
				<td>@b.Genre</td>
			</tr>
		}
		</tbody>
	</table>
	
	<div class="row">
		<div class="col-md-6 "> </div>

		<div class="col-md-2">
			<div class="edit_author" @onclick="() => editAuthor(Int32.Parse(AuthorId))" >Изменить автора</div>
		</div>
		<div class="col-md-1 "> </div>
		<div class="col-md-2">
			<div class="del_author" @onclick="() => deleteAuthor(Int32.Parse(AuthorId))" >Удалить автора</div>
		</div>
		<div class="col-md-1 "> </div>
	</div>

}
@code {
	[Parameter]
	public string AuthorId { get; set; }

	public List<Data.Models.Author> Authors { get; set; }
	public Data.Models.Author? CurrentAuthor { get; set; }
	[Inject]
	private IAuthorProvider authorsProvider { get; set; }
	protected async override Task OnInitializedAsync()
	{
		CurrentAuthor = await authorsProvider.GetOne(Int32.Parse(AuthorId));
		Authors = await authorsProvider.GetAll();
		Console.WriteLine(CurrentAuthor);
		base.OnInitialized();
	}
	
	public void toItem(Book book)
	{
		_navigationManager.NavigateTo($"/Book/{book.Id}");
	}
	private async void editAuthor(int id)
    {
        var post = await authorsProvider.GetOne(id);
        _navigationManager.NavigateTo($"/Author/{id}/edit");
    }

	private async void deleteAuthor(int id)
    {
        await authorsProvider.Remove(id);
        _navigationManager.NavigateTo("/Authors");
    }

}
